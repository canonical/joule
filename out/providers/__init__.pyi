import abc
from abc import ABC, abstractmethod
from joule.events import Event as Event
from typing import Any, Iterator, Optional

class BaseProvider(ABC, metaclass=abc.ABCMeta):
    applications: Any = ...
    @abstractmethod
    def __init__(self, *applications: object) -> Any: ...
    @abstractmethod
    def mark_essential(self) -> None: ...
    @abstractmethod
    def get_events_from_message_queue(self) -> Iterator[Optional[Event]]: ...
    @abstractmethod
    def send_join_to_message_queue(self, application: object, event: Event, payload: dict) -> None: ...
    def loop(self) -> None: ...
